library(doParallel)
library(foreach)
source("R/hello.R")
registerDoParallel(cores = 24)

alpha <- 0.2

# n <- 10
# trueAlter <- c(1,3,5,7,9)
# trueNull <- setdiff(1:n, trueAlter)
# groups <- 5
# groupSize <- n/groups
# fdpCritical <- 0.1

n <- 6
trueAlter <- c(1:6)
trueNull <- setdiff(1:n, trueAlter)
groups <- 2
groupSize <- n/groups
fdpCritical <- 0.4


groupCountGenerator <- function(){
    groups <- groups
    groupSize <- groupSize
    function(nullHypo){
        counts <- rep(0, groups)
        for(i in nullHypo){
            ind <- (i-1)%/%groupSize + 1
            counts[ind] <- counts[ind] + 1
        }
        counts
    }
}

groupCounts <- groupCountGenerator()
mytest <- function(pvalues){
    library("poolr")
    stouffer(pvalues)$p
}
lossGenerator <- function(i){
    force(i)
    groupCounts <- groupCounts
    fdpCritical <- fdpCritical
    groupSize <- groupSize
    function(nullHypo){
        counts <- groupCounts(nullHypo)
        sum(counts[i]>fdpCritical*groupSize)
    }
}

lossFuncSets <- list()
for(i in 1:groups){
    lossFuncSets[[i]] <- lossGenerator(i)
}
lossFuncAll <- lossGenerator(1:groups)

trueLoss <- lossFuncAll(trueNull)
simResult <- c()
simResult <- foreach(i = 1:1000, .combine = rbind) %dopar%{
# for(i in 1:100){

    pvalues <- runif(n)
    pvalues[trueAlter] <- rbeta(length(trueAlter), 1, 2)
    nullSets <- findNullSets(pvalues, mytest, alpha)
    result1 <- maxLoss(lossFuncAll, nullSets)
    result2 <- minLoss(lossFuncAll, nullSets)
    c(result1, result2)
    # for(fun in lossFuncSets){
    #     result<-c(result, maxLoss(fun, nullSets))
    # }
    # result
}

colMeans(simResult)
generalLoss <- simResult[,1]
individualLoss <- simResult[,2:ncol(simResult)]
## Exceedance rate
mean(generalLoss < trueLoss)
mean(generalLoss)


mean(rowSums(individualLoss) < trueLoss)

sapply(nullSets,lossFuncAll)




