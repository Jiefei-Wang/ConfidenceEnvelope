library(doParallel)
library(foreach)
source("R/exceedance.R")
registerDoParallel(cores = 24)

alpha <- 0.2

n <- 16
trueAlter <- 5:12
trueNull <- setdiff(1:n, trueAlter)
groups <- 2
groupSize <- n/groups

statFunc <- function(pvalues){
    sum(qnorm(pvalues))
}

statCriticalFunc <- function(n, alpha){
    qnorm(alpha)*sqrt(n)
}


groupCountGenerator <- function(){
    groups <- groups
    groupSize <- groupSize
    function(nullHypo){
        counts <- rep(0L, groups)
        ind <- (nullHypo-1L)%/%groupSize + 1L
        for(i in ind){
            counts[i] <- counts[i] + 1L
        }
        counts
    }
}

groupCounts <- groupCountGenerator()





lossGenerator1 <- function(i){
    force(i)
    groupCounts <- groupCounts
    groupSize <- groupSize
    # fdpCritical <- fdpCritical
    function(nullHypo){
        counts <- groupCounts(nullHypo)
        sum(counts[i])
    }
}

lossGenerator2 <- function(k, groupCounts, groupSize){
    force(k)
    function(nullHypo){
        counts <- groupCounts(nullHypo)
        sum(counts >= k)
    }
}
#
lossFuncSets <- list()
for(i in 1:groups){
    lossFuncSets[[i]] <- lossGenerator1(i)
}


trueLoss1 <- lossFuncSets[[1]](trueNull)
trueLoss2 <- lossFuncSets[[2]](trueNull)

I <- rep(list(NULL), groups)
for(i in seq_along(I)){
    I[[i]] <- (groupSize*(i-1)+1):(groupSize*i)
}


simResult <- c()

system.time({
simResult <- foreach(i = 1:1000, .combine = rbind) %do%{
    # for(i in 1:100){

    pvalues <- runif(n)
    pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)

    k <- rep(groupSize, 2)
    param <- GCS_FP_param(pvalues, I, statFunc)


    next_loop <- TRUE
    while(next_loop){
        next_loop <- FALSE
        if(all(k==0))break
        i <- sample(1:2, 1)
        tmp_k <- k
        if(tmp_k[i] == 0)
            next
        tmp_k[i] <- tmp_k[i] - 1
        loss <- GCS_FP(param, tmp_k, statFunc, statCriticalFunc, alpha)
        if(loss <= 1){
            k <- tmp_k
            next_loop <- TRUE
        }
    }

    k
}

})



colMeans(simResult)


test <- data.frame(test1= simResult[,1]>=4, test2=simResult[,2]>=4)

table(test)
