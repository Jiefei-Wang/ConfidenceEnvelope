library(doParallel)
library(foreach)
library(exceedance)
# source("R/exceedance.R")
registerDoParallel(cores = 24)

alpha <- 0.05

n <- 16
trueAlter <- c(1:3,5:6,9)
trueNull <- setdiff(1:n, trueAlter)
groups <- 4
groupSize <- n/groups

BJPvalue <- function(x){
    generalKSStat::GKSPvalue(x=x, statName = "BJ+")
}

groupCountGenerator <- function(){
    groups <- groups
    groupSize <- groupSize
    function(nullHypo){
        counts <- rep(0L, groups)
        ind <- (nullHypo-1L)%/%groupSize + 1L
        for(i in ind){
            counts[i] <- counts[i] + 1L
        }
        counts
    }
}

groupCounts <- groupCountGenerator()

lossGenerator <- function(i){
    force(i)
    groupCounts <- groupCounts
    groupSize <- groupSize
    # fdpCritical <- fdpCritical
    function(nullHypo){
        counts <- groupCounts(nullHypo)
        sum(counts[i])
    }
}

trueLoss <- c()
for(i in 1:groups){
    lossFunc <- lossGenerator(i)
    trueLoss <- c(trueLoss, lossFunc(trueNull))
}

GCS_trueLoss <- function(I, k, trueNull) {
    res <- 0
    for(i in seq_along(I)){
        res <- res + (length(intersect(I[[i]], trueNull)) >=k[i])
    }
    res
}


I <- rep(list(NULL), groups)
for(i in seq_along(I)){
    I[[i]] <- (groupSize*(i-1)+1):(groupSize*i)
}


simResult <- c()

system.time({
simResult <- foreach(i = 1:1000) %dopar%{
    library(exceedance)
    # for(i in 1:100){
    globalStat <- generalExceedance:::BJGlobal()
    pvalues <- runif(n)
    pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)


    param_GW <- param_fast_GW("BJ", range_type = "proportion", param1 = c(0,1))
    profile <- exceedance_profile(pvalues, param_GW)

    test <- rep(0, 4)
    test[1] <- exceedance_confidence(profile, alpha, ri = 1:4)
    test[2] <- exceedance_confidence(profile, alpha, ri = 5:8)
    test[3] <- exceedance_confidence(profile, alpha, ri = 9:12)
    test[4] <- exceedance_confidence(profile, alpha, ri = 13:16)

    # generalExceedance:::GCS_FP(param, c(4,4,4,4), alpha)

    param <- generalExceedance:::GCS_FP_param(pvalues, I, globalStat)
    # k <- c(1,3,4,5)
    # FC <- generalExceedance:::GCS_FP(param, k, alpha)
    # FC
    k_list <- expand.grid(1:5,1:5,1:5,1:5)
    FC_list <- rep(NA_integer_, nrow(k_list))
    for(j in 1:nrow(k_list)){
        k <- as.integer(k_list[j,])
        FC_list[j] <- generalExceedance:::GCS_FP(param, k, alpha)
    }
#
#     pvalues[trueNull]
#     pvalues <- runif(n)
#     stat(globalStat, pvalues[trueNull])
#     critical(globalStat, 0.2, 10)
#
#     res <- c()
#     for(j in 1:nrow(k_list)){
#         k <- as.integer(k_list[j,])
#         res<- c(res, GCS_trueLoss(I,k, trueNull) <= FC_list[j])
#     }

    FC_idx <- rep(0, 4)
    k_sum <- rowSums(k_list)
    for(j in 1:4) {
        FC <- which(FC_list <= j-1)
        if(length(FC)>0){
            FC_idices <- FC[k_sum[FC] == min(k_sum[FC])]
            if(length(FC_idices)>1){
                k_var <- c()
                for(q in FC_idices){
                    k_var <- c(k_var,var(as.integer(k_list[q,])))
                }
                FC_idices <- FC_idices[k_var==max(k_var)]
            }
            FC_idx[j] <- FC_idices[sample(length(FC_idices),1)]
        }else{
            FC_idx[j] <- NA
        }
    }

    # FC_list[FC_idx]
    k_list[FC_idx,]
#
#     if(any(k_list[FC_idx[1],] != test*4 + 1))
#         stop(k_list[FC_idx[1],], test)
    FC_num <- rep(NA, 4)
    for(j in 1:4){
        FC_num[j] <- sum(trueLoss >= k_list[FC_idx[j],], na.rm = TRUE)
    }
    list(
        k = k_list[FC_idx,],
        FC_num = FC_num
    )
}
})

# GCS_trueLoss(I,k, trueNull)



average_k <- matrix(0, 4, 4)
FC <- matrix(0, length(simResult), 4)
for(i in seq_along(simResult)){
    average_k <- average_k + simResult[[i]]$k
    FC[i, ] <- simResult[[i]]$FC_num
}
average_k <- average_k/length(simResult)
colnames(average_k) <- c("k1","k2","k3", "k4")
rownames(average_k) <- c("0","1","2", "3")

round(t(average_k), 2) - 1L
mean(FC[,1] <=0)
mean(FC[,2] <=1)
mean(FC[,3] <=2)
mean(FC[,4] <=3)

colMeans(FC)


colMeans(simResult)


test <- data.frame(test1= simResult[,1]>=4, test2=simResult[,2]>=4)

table(test)
