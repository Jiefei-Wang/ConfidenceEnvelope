}
lossGenerator1 <- function(i){
force(i)
groupCounts <- groupCounts
groupSize <- groupSize
# fdpCritical <- fdpCritical
function(nullHypo){
counts <- groupCounts(nullHypo)
sum(counts[i])
}
}
lossGenerator2 <- function(k, groupCounts, groupSize){
force(k)
function(nullHypo){
counts <- groupCounts(nullHypo)
sum(counts >= k)
}
}
#
lossFuncSets <- list()
for(i in 1:groups){
lossFuncSets[[i]] <- lossGenerator1(i)
}
lossFunc_sharper <- lossGenerator2(c(trueLoss1 + 1,trueLoss2 + 1),
groupCounts, groupSize)
trueLoss1 <- lossFuncSets[[1]](trueNull)
trueLoss2 <- lossFuncSets[[2]](trueNull)
trueLoss_sharper <- lossFunc_sharper(trueNull)
simResult <- c()
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result1 <- maxLoss(lossFuncSets[[1]], nullSets)
result2 <- maxLoss(lossFuncSets[[2]], nullSets)
result1
result2
k <- c(result1, result2) + 1L
tmp_k <- k
loss <- 0L
i <- 0L
while(loss==0){
k <- tmp_k
i <- i+1L
if(i>groups)
i=1L
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
}
loss
k
simResult <- c()
simResult <- foreach(i = 1:100, .combine = rbind) %dopar%{
# for(i in 1:1000){
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result1 <- maxLoss(lossFuncSets[[1]], nullSets)
result2 <- maxLoss(lossFuncSets[[2]], nullSets)
k <- c(result1, result2) + 1L
tmp_k <- k
loss <- 0L
i <- 0L
while(loss==0){
k <- tmp_k
i <- i+1L
if(i>groups)
i=1L
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
}
c(result1, result2, k - 1)
}
colMeans(simResult)
n <- 12
trueAlter <- 1:12
trueNull <- setdiff(1:n, trueAlter)
groups <- 4
groupSize <- n/groups
groupCountGenerator <- function(){
groups <- groups
groupSize <- groupSize
function(nullHypo){
counts <- rep(0L, groups)
ind <- (nullHypo-1L)%/%groupSize + 1L
for(i in ind){
counts[i] <- counts[i] + 1L
}
counts
}
}
groupCounts <- groupCountGenerator()
mytest <- function(pvalues){
library("poolr")
stouffer(pvalues)$p
}
lossGenerator1 <- function(i){
force(i)
groupCounts <- groupCounts
groupSize <- groupSize
# fdpCritical <- fdpCritical
function(nullHypo){
counts <- groupCounts(nullHypo)
sum(counts[i])
}
}
lossGenerator2 <- function(k, groupCounts, groupSize){
force(k)
function(nullHypo){
counts <- groupCounts(nullHypo)
sum(counts >= k)
}
}
#
lossFuncSets <- list()
for(i in 1:groups){
lossFuncSets[[i]] <- lossGenerator1(i)
}
lossFuncSets <- list()
for(i in 1:groups){
lossFuncSets[[i]] <- lossGenerator1(i)
}
trueLoss1 <- lossFuncSets[[1]](trueNull)
trueLoss2 <- lossFuncSets[[2]](trueNull)
trueLoss1
trueLoss2
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result<- c()
for(i in 1:groups){
result[i] <- maxLoss(lossFuncSets[[i]], nullSets)
}
result
k <- c(result1, result2) + 1L
tmp_k <- k
loss <- 0L
i <- 0L
while(loss==0){
k <- tmp_k
i <- i+1L
if(i>groups)
i=1L
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
}
loss
tmp_k
k <- result + 1L
tmp_k <- k
loss <- 0L
i <- 0L
while(loss==0){
k <- tmp_k
i <- i+1L
if(i>groups)
i=1L
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
}
k
k
tmp_k
tmp_k <- c(4,2,3,2)
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
loss
tmp_k <- c(4,3,2,2)
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
loss
tmp_k <- c(4,3,3,1)
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
loss
k <- result + 1L
tmp_k <- k
loss <- 0L
while(loss==0){
k <- tmp_k
for(i in 1:groups){
tmp_k <- k
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
if(i==1)
loss <- maxLoss(lossFunc_sharper, nullSets)
else
loss <- min(loss, maxLoss(lossFunc_sharper, nullSets))
}
}
loss
k
simResult <- c()
simResult <- foreach(i = 1:100, .combine = rbind) %dopar%{
# for(i in 1:1000){
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result<- c()
for(i in 1:groups){
result[i] <- maxLoss(lossFuncSets[[i]], nullSets)
}
k <- result + 1L
tmp_k <- k
loss <- 0L
while(loss==0){
k <- tmp_k
for(i in 1:groups){
tmp_k <- k
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
if(i==1)
loss <- maxLoss(lossFunc_sharper, nullSets)
else
loss <- min(loss, maxLoss(lossFunc_sharper, nullSets))
}
}
c(result1, result2, k - 1)
}
colMeans(simResult)
simResult <- foreach(i = 1:100, .combine = rbind) %dopar%{
# for(i in 1:1000){
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result<- c()
for(i in 1:groups){
result[i] <- maxLoss(lossFuncSets[[i]], nullSets)
}
k <- result + 1L
tmp_k <- k
loss <- 0L
while(loss==0){
k <- tmp_k
for(i in 1:groups){
tmp_k <- k
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
if(i==1)
loss <- maxLoss(lossFunc_sharper, nullSets)
else
loss <- min(loss, maxLoss(lossFunc_sharper, nullSets))
}
}
c(result, k - 1)
}
colMeans(simResult)
288-255
devtools::load_all(".")
library(doParallel)
library(foreach)
library(exceedance)
source("read_data2.R")
alpha <- 0.05
n <- length(pvalues)
groups <- tax$Phylum
unique_groups <- unique(groups)
n <- length(pvalues)
I <- rep(list(NULL), length(unique_groups))
for(i in seq_along(unique_groups)){
I[[i]] <- which(groups == unique_groups[i])
}
I
globalStat <- generalExceedance:::BJGlobal()
param <- generalExceedance:::GCS_FP_param(pvalues, I, globalStat)
globalStat <- generalExceedance:::BJGlobal()
param <- generalExceedance:::GCS_FP_param(pvalues, I, globalStat)
k <- lengths(I)
generalExceedance:::GCS_FP(param, k, alpha)
k
library(doParallel)
library(foreach)
library(exceedance)
source("read_data2.R")
# source("R/exceedance.R")
registerDoParallel(cores = 24)
alpha <- 0.05
n <- length(pvalues)
groups <- tax$Phylum
unique_groups <- unique(groups)
n <- length(pvalues)
I <- rep(list(NULL), length(unique_groups))
for(i in seq_along(unique_groups)){
I[[i]] <- which(groups == unique_groups[i])
}
globalStat <- generalExceedance:::BJGlobal()
k <- lengths(I)
generalExceedance:::GCS_FP(param, k, alpha)
param <- generalExceedance:::GCS_FP_param(pvalues, I, globalStat)
k <- lengths(I)
generalExceedance:::GCS_FP(param, k, alpha)
k <- lengths(I)+1
generalExceedance:::GCS_FP(param, k, alpha)
# source("R/exceedance.R")
registerDoParallel(cores = 24)
k_base <- lengths(I) + 1
foreqch(i = 1:length(I))%dopar%{
param <- generalExceedance:::GCS_FP_param(pvalues, I, globalStat)
k <- k_base
k[i] <- k[i] - 1
generalExceedance:::GCS_FP(param, k, alpha)
}
k_base <- lengths(I) + 1
foreach(i = 1:length(I))%dopar%{
param <- generalExceedance:::GCS_FP_param(pvalues, I, globalStat)
k <- k_base
k[i] <- k[i] - 1
generalExceedance:::GCS_FP(param, k, alpha)
}
k_base[3]
?expand.grid
offset <- rep(list(0:1), length(I))
offset
offset <- expand.grid(offset)
offset
k_base <- lengths(I) + 1
k_base[3] <- 41
generalExceedance:::GCS_FP(param, k_base, alpha)
k_base <- lengths(I) + 1
k_base[3] <- 41
offset <- rep(list(0:1), length(I))
offset <- expand.grid(offset)
res <- foreach(i = 1:length(I))%dopar%{
param <- generalExceedance:::GCS_FP_param(pvalues, I, globalStat)
k <- k_base - offset[i]
generalExceedance:::GCS_FP(param, k, alpha)
}
offset
nrow(offset)
offset[i,]
k_base - offset[i,]
k_base <- lengths(I) + 1
k_base[3] <- 41
offset <- rep(list(0:1), length(I))
offset <- expand.grid(offset)
res <- foreach(i = 1:nrow(offset))%dopar%{
param <- generalExceedance:::GCS_FP_param(pvalues, I, globalStat)
k <- k_base - offset[i,]
generalExceedance:::GCS_FP(param, k, alpha)
}
library(doParallel)
library(foreach)
library(exceedance)
# source("R/exceedance.R")
registerDoParallel(cores = 24)
alpha <- 0.05
n <- 16
trueAlter <- c(1:3,5:6,9)
trueNull <- setdiff(1:n, trueAlter)
groups <- 4
groupSize <- n/groups
BJPvalue <- function(x){
generalKSStat::GKSPvalue(x=x, statName = "BJ+")
}
groupCountGenerator <- function(){
groups <- groups
groupSize <- groupSize
function(nullHypo){
counts <- rep(0L, groups)
ind <- (nullHypo-1L)%/%groupSize + 1L
for(i in ind){
counts[i] <- counts[i] + 1L
}
counts
}
}
groupCounts <- groupCountGenerator()
lossGenerator <- function(i){
force(i)
groupCounts <- groupCounts
groupSize <- groupSize
# fdpCritical <- fdpCritical
function(nullHypo){
counts <- groupCounts(nullHypo)
sum(counts[i])
}
}
trueLoss <- c()
for(i in 1:groups){
lossFunc <- lossGenerator(i)
trueLoss <- c(trueLoss, lossFunc(trueNull))
}
GCS_trueLoss <- function(I, k, trueNull) {
res <- 0
for(i in seq_along(I)){
res <- res + (length(intersect(I[[i]], trueNull)) >=k[i])
}
res
}
I <- rep(list(NULL), groups)
for(i in seq_along(I)){
I[[i]] <- (groupSize*(i-1)+1):(groupSize*i)
}
simResult <- c()
system.time({
simResult <- foreach(i = 1:120) %dopar%{
library(exceedance)
# for(i in 1:100){
globalStat <- generalExceedance:::BJGlobal()
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 1, 10)
param_GW <- param_fast_GW("BJ", range_type = "proportion", param1 = c(0,1))
profile <- exceedance_profile(pvalues, param_GW)
test <- rep(0, 4)
test[1] <- exceedance_confidence(profile, alpha, ri = 1:4)
test[2] <- exceedance_confidence(profile, alpha, ri = 5:8)
test[3] <- exceedance_confidence(profile, alpha, ri = 9:12)
test[4] <- exceedance_confidence(profile, alpha, ri = 13:16)
# generalExceedance:::GCS_FP(param, c(4,4,4,4), alpha)
param <- generalExceedance:::GCS_FP_param(pvalues, I, globalStat)
# k <- c(1,3,4,5)
# FC <- generalExceedance:::GCS_FP(param, k, alpha)
# FC
k_list <- expand.grid(1:5,1:5,1:5,1:5)
FC_list <- rep(NA_integer_, nrow(k_list))
for(j in 1:nrow(k_list)){
k <- as.integer(k_list[j,])
FC_list[j] <- generalExceedance:::GCS_FP(param, k, alpha)
}
#
#     pvalues[trueNull]
#     pvalues <- runif(n)
#     stat(globalStat, pvalues[trueNull])
#     critical(globalStat, 0.2, 10)
#
#     res <- c()
#     for(j in 1:nrow(k_list)){
#         k <- as.integer(k_list[j,])
#         res<- c(res, GCS_trueLoss(I,k, trueNull) <= FC_list[j])
#     }
FC_idx <- rep(0, 4)
k_sum <- rowSums(k_list)
for(j in 1:4) {
FC <- which(FC_list <= j-1)
if(length(FC)>0){
FC_idices <- FC[k_sum[FC] == min(k_sum[FC])]
if(length(FC_idices)>1){
k_var <- c()
for(q in FC_idices){
k_var <- c(k_var,var(as.integer(k_list[q,])))
}
FC_idices <- FC_idices[k_var==max(k_var)]
}
FC_idx[j] <- FC_idices[sample(length(FC_idices),1)]
}else{
FC_idx[j] <- NA
}
}
# FC_list[FC_idx]
k_list[FC_idx,]
#
#     if(any(k_list[FC_idx[1],] != test*4 + 1))
#         stop(k_list[FC_idx[1],], test)
FC_num <- rep(NA, 4)
for(j in 1:4){
FC_num[j] <- sum(trueLoss >= k_list[FC_idx[j],], na.rm = TRUE)
}
list(
k = k_list[FC_idx,],
FC_num = FC_num
)
}
})
# GCS_trueLoss(I,k, trueNull)
average_k <- matrix(0, 4, 4)
FC <- matrix(0, length(simResult), 4)
for(i in seq_along(simResult)){
average_k <- average_k + simResult[[i]]$k
FC[i, ] <- simResult[[i]]$FC_num
}
average_k <- average_k/length(simResult)
colnames(average_k) <- c("k1","k2","k3", "k4")
rownames(average_k) <- c("0","1","2", "3")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BSgenome.Hsapiens.NCBI.GRCh38")
BiocManager::install(c("SummarizedExperiment","GEOquery"))
library(Geoquery)
BiocManager::install(c("GEOquery"))
library(GEOquery)
library(generalExceedance)
load("C:/Users/jiefei/OneDrive/course material/project9_generalized_exceedance/code/generalExceedance/test/FC_500_5_50_2.RData")
mean(final)
FalseCoverage
devtools::install()
devtools::load_all()
FalseCoverage
groups
nGroupAlter
groupSize
nGroups
groupSize
nGroupAlter
final
mean(final)
pvalues
pvalues <- runif(n)
pvalues[trueAltIndex] <- rbeta(length(trueAltIndex), 0.5, 1)
pvalues
hist(pvalues)
mean(final)
final
mean(rowSums(final))
FC
?foreach
library(foreach)
library(doParallel)
install.packages("BiocManager")
install.packages("BiocManager")
