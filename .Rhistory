}
simResult <- foreach(i = 1:100, .combine = rbind) %dopar%{
# for(i in 1:1000){
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result1 <- maxLoss(lossFuncSets[[1]], nullSets)
result2 <- maxLoss(lossFuncSets[[2]], nullSets)
# k <- c(result1, result2) + 1L
# tmp_k <- k
# loss <- 0L
# i <- 0L
# while(loss==0){
#     k <- tmp_k
#     i <- i+1L
#     if(i>groups)
#         i=1L
#     tmp_k[i] <- tmp_k[i] - 1
#     lossFunc_sharper <- lossGenerator2(tmp_k)
#     loss <- maxLoss(lossFunc_sharper, nullSets)
# }
c(result1, result2)
}
lossGenerator2
lossGenerator2
groupCounts
groupSize
simResult <- foreach(i = 1:100, .combine = rbind) %dopar%{
# for(i in 1:1000){
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result1 <- maxLoss(lossFuncSets[[1]], nullSets)
result2 <- maxLoss(lossFuncSets[[2]], nullSets)
k <- c(result1, result2) + 1L
tmp_k <- k
loss <- 0L
i <- 0L
while(loss==0){
k <- tmp_k
i <- i+1L
if(i>groups)
i=1L
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
}
c(result1, result2, k - 1)
}
lossGenerator2
lossGenerator2 <- function(k, groupCounts, groupSize){
force(k)
function(nullHypo){
counts <- groupCounts(nullHypo)
sum(counts >= k)
}
}
#
lossFuncSets <- list()
for(i in 1:groups){
lossFuncSets[[i]] <- lossGenerator1(i)
}
lossFunc_sharper <- lossGenerator2(c(trueLoss1 + 1,trueLoss2 + 1),
groupCounts, groupSize)
trueLoss1 <- lossFuncSets[[1]](trueNull)
trueLoss2 <- lossFuncSets[[2]](trueNull)
trueLoss_sharper <- lossFunc_sharper(trueNull)
simResult <- c()
simResult <- foreach(i = 1:100, .combine = rbind) %dopar%{
# for(i in 1:1000){
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result1 <- maxLoss(lossFuncSets[[1]], nullSets)
result2 <- maxLoss(lossFuncSets[[2]], nullSets)
k <- c(result1, result2) + 1L
tmp_k <- k
loss <- 0L
i <- 0L
while(loss==0){
k <- tmp_k
i <- i+1L
if(i>groups)
i=1L
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
}
c(result1, result2, k - 1)
}
colMeans(simResult)
generalLoss <- simResult[,1]
trueAlter
result2
lossFuncSets
lossFuncSets
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result1 <- maxLoss(lossFuncSets[[1]], nullSets)
result1
lossFuncSets[[1]]
lossFuncSets[[1]](1:10)
debug(lossFuncSets[[1]])
lossFuncSets[[1]](1:10)
i
counts[i]
groupCountGenerator <- function(){
groups <- groups
groupSize <- groupSize
function(nullHypo){
counts <- rep(0L, groups)
ind <- (nullHypo-1L)%/%groupSize + 1L
for(i in ind){
counts[i] <- counts[i] + 1L
}
counts
}
}
groupCounts <- groupCountGenerator()
mytest <- function(pvalues){
library("poolr")
stouffer(pvalues)$p
}
lossGenerator1 <- function(i){
force(i)
groupCounts <- groupCounts
groupSize <- groupSize
# fdpCritical <- fdpCritical
function(nullHypo){
counts <- groupCounts(nullHypo)
sum(counts[i])
}
}
lossGenerator2 <- function(k, groupCounts, groupSize){
force(k)
function(nullHypo){
counts <- groupCounts(nullHypo)
sum(counts >= k)
}
}
#
lossFuncSets <- list()
for(i in 1:groups){
lossFuncSets[[i]] <- lossGenerator1(i)
}
lossFunc_sharper <- lossGenerator2(c(trueLoss1 + 1,trueLoss2 + 1),
groupCounts, groupSize)
trueLoss1 <- lossFuncSets[[1]](trueNull)
trueLoss2 <- lossFuncSets[[2]](trueNull)
trueLoss_sharper <- lossFunc_sharper(trueNull)
simResult <- c()
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result1 <- maxLoss(lossFuncSets[[1]], nullSets)
result2 <- maxLoss(lossFuncSets[[2]], nullSets)
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result1 <- maxLoss(lossFuncSets[[1]], nullSets)
result2 <- maxLoss(lossFuncSets[[2]], nullSets)
simResult <- foreach(i = 1:100, .combine = rbind) %dopar%{
# for(i in 1:1000){
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result1 <- maxLoss(lossFuncSets[[1]], nullSets)
result2 <- maxLoss(lossFuncSets[[2]], nullSets)
k <- c(result1, result2) + 1L
tmp_k <- k
loss <- 0L
i <- 0L
while(loss==0){
k <- tmp_k
i <- i+1L
if(i>groups)
i=1L
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
}
c(result1, result2, k - 1)
}
colMeans(simResult)
n <- 12
trueAlter <- 1:6
trueNull <- setdiff(1:n, trueAlter)
groups <- 2
groupSize <- n/groups
groupCountGenerator <- function(){
groups <- groups
groupSize <- groupSize
function(nullHypo){
counts <- rep(0L, groups)
ind <- (nullHypo-1L)%/%groupSize + 1L
for(i in ind){
counts[i] <- counts[i] + 1L
}
counts
}
}
groupCounts <- groupCountGenerator()
mytest <- function(pvalues){
library("poolr")
stouffer(pvalues)$p
}
lossGenerator1 <- function(i){
force(i)
groupCounts <- groupCounts
groupSize <- groupSize
# fdpCritical <- fdpCritical
function(nullHypo){
counts <- groupCounts(nullHypo)
sum(counts[i])
}
}
lossGenerator2 <- function(k, groupCounts, groupSize){
force(k)
function(nullHypo){
counts <- groupCounts(nullHypo)
sum(counts >= k)
}
}
#
lossFuncSets <- list()
for(i in 1:groups){
lossFuncSets[[i]] <- lossGenerator1(i)
}
lossFunc_sharper <- lossGenerator2(c(trueLoss1 + 1,trueLoss2 + 1),
groupCounts, groupSize)
trueLoss1 <- lossFuncSets[[1]](trueNull)
trueLoss2 <- lossFuncSets[[2]](trueNull)
trueLoss_sharper <- lossFunc_sharper(trueNull)
simResult <- c()
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result1 <- maxLoss(lossFuncSets[[1]], nullSets)
result2 <- maxLoss(lossFuncSets[[2]], nullSets)
result1
result2
trueAlter <- 1:12
trueNull <- setdiff(1:n, trueAlter)
groups <- 2
groupSize <- n/groups
groupCountGenerator <- function(){
groups <- groups
groupSize <- groupSize
function(nullHypo){
counts <- rep(0L, groups)
ind <- (nullHypo-1L)%/%groupSize + 1L
for(i in ind){
counts[i] <- counts[i] + 1L
}
counts
}
}
groupCounts <- groupCountGenerator()
mytest <- function(pvalues){
library("poolr")
stouffer(pvalues)$p
}
lossGenerator1 <- function(i){
force(i)
groupCounts <- groupCounts
groupSize <- groupSize
# fdpCritical <- fdpCritical
function(nullHypo){
counts <- groupCounts(nullHypo)
sum(counts[i])
}
}
lossGenerator2 <- function(k, groupCounts, groupSize){
force(k)
function(nullHypo){
counts <- groupCounts(nullHypo)
sum(counts >= k)
}
}
#
lossFuncSets <- list()
for(i in 1:groups){
lossFuncSets[[i]] <- lossGenerator1(i)
}
lossFunc_sharper <- lossGenerator2(c(trueLoss1 + 1,trueLoss2 + 1),
groupCounts, groupSize)
trueLoss1 <- lossFuncSets[[1]](trueNull)
trueLoss2 <- lossFuncSets[[2]](trueNull)
trueLoss_sharper <- lossFunc_sharper(trueNull)
simResult <- c()
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result1 <- maxLoss(lossFuncSets[[1]], nullSets)
result2 <- maxLoss(lossFuncSets[[2]], nullSets)
result1
result2
k <- c(result1, result2) + 1L
tmp_k <- k
loss <- 0L
i <- 0L
while(loss==0){
k <- tmp_k
i <- i+1L
if(i>groups)
i=1L
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
}
loss
k
simResult <- c()
simResult <- foreach(i = 1:100, .combine = rbind) %dopar%{
# for(i in 1:1000){
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result1 <- maxLoss(lossFuncSets[[1]], nullSets)
result2 <- maxLoss(lossFuncSets[[2]], nullSets)
k <- c(result1, result2) + 1L
tmp_k <- k
loss <- 0L
i <- 0L
while(loss==0){
k <- tmp_k
i <- i+1L
if(i>groups)
i=1L
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
}
c(result1, result2, k - 1)
}
colMeans(simResult)
n <- 12
trueAlter <- 1:12
trueNull <- setdiff(1:n, trueAlter)
groups <- 4
groupSize <- n/groups
groupCountGenerator <- function(){
groups <- groups
groupSize <- groupSize
function(nullHypo){
counts <- rep(0L, groups)
ind <- (nullHypo-1L)%/%groupSize + 1L
for(i in ind){
counts[i] <- counts[i] + 1L
}
counts
}
}
groupCounts <- groupCountGenerator()
mytest <- function(pvalues){
library("poolr")
stouffer(pvalues)$p
}
lossGenerator1 <- function(i){
force(i)
groupCounts <- groupCounts
groupSize <- groupSize
# fdpCritical <- fdpCritical
function(nullHypo){
counts <- groupCounts(nullHypo)
sum(counts[i])
}
}
lossGenerator2 <- function(k, groupCounts, groupSize){
force(k)
function(nullHypo){
counts <- groupCounts(nullHypo)
sum(counts >= k)
}
}
#
lossFuncSets <- list()
for(i in 1:groups){
lossFuncSets[[i]] <- lossGenerator1(i)
}
lossFuncSets <- list()
for(i in 1:groups){
lossFuncSets[[i]] <- lossGenerator1(i)
}
trueLoss1 <- lossFuncSets[[1]](trueNull)
trueLoss2 <- lossFuncSets[[2]](trueNull)
trueLoss1
trueLoss2
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result<- c()
for(i in 1:groups){
result[i] <- maxLoss(lossFuncSets[[i]], nullSets)
}
result
k <- c(result1, result2) + 1L
tmp_k <- k
loss <- 0L
i <- 0L
while(loss==0){
k <- tmp_k
i <- i+1L
if(i>groups)
i=1L
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
}
loss
tmp_k
k <- result + 1L
tmp_k <- k
loss <- 0L
i <- 0L
while(loss==0){
k <- tmp_k
i <- i+1L
if(i>groups)
i=1L
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
}
k
k
tmp_k
tmp_k <- c(4,2,3,2)
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
loss
tmp_k <- c(4,3,2,2)
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
loss
tmp_k <- c(4,3,3,1)
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
loss <- maxLoss(lossFunc_sharper, nullSets)
loss
k <- result + 1L
tmp_k <- k
loss <- 0L
while(loss==0){
k <- tmp_k
for(i in 1:groups){
tmp_k <- k
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
if(i==1)
loss <- maxLoss(lossFunc_sharper, nullSets)
else
loss <- min(loss, maxLoss(lossFunc_sharper, nullSets))
}
}
loss
k
simResult <- c()
simResult <- foreach(i = 1:100, .combine = rbind) %dopar%{
# for(i in 1:1000){
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result<- c()
for(i in 1:groups){
result[i] <- maxLoss(lossFuncSets[[i]], nullSets)
}
k <- result + 1L
tmp_k <- k
loss <- 0L
while(loss==0){
k <- tmp_k
for(i in 1:groups){
tmp_k <- k
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
if(i==1)
loss <- maxLoss(lossFunc_sharper, nullSets)
else
loss <- min(loss, maxLoss(lossFunc_sharper, nullSets))
}
}
c(result1, result2, k - 1)
}
colMeans(simResult)
simResult <- foreach(i = 1:100, .combine = rbind) %dopar%{
# for(i in 1:1000){
pvalues <- runif(n)
pvalues[trueAlter] <- rbeta(length(trueAlter), 0.5, 2)
nullSets <- findNullSets(pvalues, mytest, alpha)
result<- c()
for(i in 1:groups){
result[i] <- maxLoss(lossFuncSets[[i]], nullSets)
}
k <- result + 1L
tmp_k <- k
loss <- 0L
while(loss==0){
k <- tmp_k
for(i in 1:groups){
tmp_k <- k
tmp_k[i] <- tmp_k[i] - 1
lossFunc_sharper <- lossGenerator2(tmp_k, groupCounts, groupSize)
if(i==1)
loss <- maxLoss(lossFunc_sharper, nullSets)
else
loss <- min(loss, maxLoss(lossFunc_sharper, nullSets))
}
}
c(result, k - 1)
}
colMeans(simResult)
